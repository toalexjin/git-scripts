#!/bin/bash

usage() {
	echo "NAME"
	echo "	git-pushself: Push current branch to remote repository"
	echo ""
	echo "SYNOPSIS"
	echo "	git pushself [<repository> | -a | --all] [-n <remote-branch> | --name <remote-branch>]"
	echo "			[-f | --force] [-v | --verbose]"
	echo "	git pushself <-h>"
	echo ""
	echo "OPTIONS"
	echo "	<repository>"
	echo "		Remote repository name. It's 'origin' by default."
	echo ""
	echo "	-a, --all"
	echo "		Push current branch to all repositories."
	echo ""
	echo "	-n <remote-branch>, --name <remote-branch>"
	echo "		Remote branch name, could be different from current branch name."
	echo ""
	echo "	-f, --force"
	echo "		Do a force push."
	echo ""
	echo "	-v, --verbose"
	echo "		Verbose mode."
	echo ""
	echo "	-h"
	echo "		Print help."
	echo ""

	exit 1
}

args=`getopt -o "n:afvh" -l "name:,all,force,verbose" -n "git pushself" -- "$@"`
if (($? != 0))
then
	echo ""
	usage
fi

eval set -- "$args"

options=""
all="no"
remotename=""

while true; do
	case "$1" in
		-n|--name)
			remotename="$2"
			if [ -z "$remotename" ]
			then
				echo "Remote branch name could not be empty string."
				exit 1
			fi
			shift 2
			;;

		-a|--all)
			all="yes"
			shift
			;;

		-f|--force)
			options+=" -f"
			shift
			;;

		-v|--verbose)
			options+=" -v"
			shift
			;;

		-h)
			usage
			;;

		--)
			shift
			break
			;;

		*)
			echo "$1 is not an option!"
			echo ""
			usage
			;;
	esac
done

# Check if it's in a git repository.
if ! git branch > /dev/null 2>&1
then
	echo "You are not in a git repository."
	exit 1
fi

# Repository name
if (($# == 0))
then
	if [ "$all" != "yes" ]
	then
		repo="origin"
	fi
elif (($# == 1))
then
	if [ "$all" = "yes" ]
	then
		usage
	fi

	repo="$1"
	if [ -z "$repo" ]
	then
		echo "Repository name could not be empty string."
		exit 1
	fi
else
	usage
fi


if [ -z "$remotename" ]
then
	remotename=$(git branch --no-color | awk '{if (NF==2 && $1=="*") print $2}')
fi

cmds=()
if [ "$all" = "yes" ]
then
	for ii in `git remote`
	do
		cmds+=("git push$options $ii HEAD:$remotename")
	done
else
	cmds+=("git push$options $repo HEAD:$remotename")
fi


for ((ii=0;ii<${#cmds[@]};ii++))
do
	echo ">> ${cmds[$ii]}"

	if [[ "${DEBUG,,}" != "yes" && "${DEBUG,,}" != "y" ]]
	then
		eval "${cmds[$ii]}"
		echo ""
	fi
done


