#!/bin/bash

myname="pushself"

failure() {
	if (($# > 0))
	then
		echo "$@" 1>&2
	fi

	exit 1
}

no_special_chars() {
	for ((i=1;i<=$#;i++))
	do
		if [ -z "${!i}" -o `expr index "${!i}" $' \t"'` -ne 0 -o `expr index "${!i}" "'"` -ne 0 ]
		then
			failure "Input argument \"${!i}\" is empty, or contains whitespace, TAB, \", '. Check 'git help $myname'."
		fi
	done
}

args=`getopt -o "b:afvh" -l "branch:,all,force,verbose" -n "git pushself" -- "$@"`
if (($? != 0))
then
	failure "Check 'git help $myname'."
fi

eval set -- "$args"

options=""
all="no"
remotename=""

while true; do
	case "$1" in
		-b|--branch)
			remotename="$2"
			if [ -z "$remotename" ]
			then
				failure "Remote branch name could not be empty string. Check 'git help $myname'."
			fi
			shift 2
			;;

		-a|--all)
			all="yes"
			shift
			;;

		-f|--force)
			options+=" -f"
			shift
			;;

		-v|--verbose)
			options+=" -v"
			shift
			;;

		-h)
			git help $myname
			failure
			;;

		--)
			shift
			break
			;;

		*)
			failure "\"$1\" is not an option! Check 'git help $myname'."
			;;
	esac
done

# Check if it's in a git repository.
if ! git branch > /dev/null 2>&1
then
	failure "You are not in a git repository."
fi

# Repository name
if (($# == 0))
then
	if [ "$all" != "yes" ]
	then
		repo="origin"
	fi
elif (($# == 1))
then
	if [ "$all" = "yes" ]
	then
		failure "Option '--all' and repository name could not coexist. Check 'git help $myname'."
	fi

	# Whitespace, TAB, " or ' are not allowed in any arguments.
	no_special_chars "$@"

	repo="$1"
else
	failure "Incorrect arguments. Check 'git help $myname'."
fi


if [ -z "$remotename" ]
then
	remotename=$(git branch --no-color | awk '{if (NF==2 && $1=="*") print $2}')
	if [ -z "$remotename" ]
	then
		failure "Curent branch name is unknown. Check 'git branch --no-color'."
	fi
fi

cmds=()
if [ "$all" == "yes" ]
then
	for ii in `git remote`
	do
		cmds+=("git push$options '$ii' 'HEAD:$remotename'")
	done
else
	cmds+=("git push$options '$repo' 'HEAD:$remotename'")
fi


for ((ii=0;ii<${#cmds[@]};ii++))
do
	echo ">> ${cmds[$ii]}"

	if [ "${GIT_SCRIPTS_DEBUG,,}" != "yes" -a "${GIT_SCRIPTS_DEBUG,,}" != "y" ]
	then
		eval "${cmds[$ii]}"

		if (($? != 0))
		then
			failure
		fi

		echo ""
	fi
done


