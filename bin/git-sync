#!/bin/bash

failure() {
	if (($# > 0))
	then
		echo "$@" 1>&2
	fi

	exit 1
}

args=`getopt -o "m:h" -l "no-ff" -n "git sync" -- "$@"`
if (($? != 0))
then
	failure
fi

eval set -- "$args"

msg=""
ff=" --ff"
msg=""

while true; do
	case "$1" in
		-m)
			msg="${2//\'/\"}"
			shift 2
			;;

		--no-ff)
			ff=" --no-ff"
			shift
			;;

		-h)
			git help sync
			failure
			;;

		--)
			shift
			break
			;;

		*)
			failure "$1 is not an option!"
			;;
	esac
done

# Check if it's in a git repository.
if ! git branch > /dev/null 2>&1
then
	failure "You are not in a git repository."
fi

if (($# == 1))
then
	branch="$1"
	remotes=(`git remote`)

	if ((${#remotes[@]} != 2))
	then
		failure "Number of remote repositories is not 2 (see output of 'git remote')."
	fi

	if [ "${remotes[0]}" = "origin" ]
	then
		primary="${remotes[0]}"
		secondary="${remotes[1]}"
	else
		primary="${remotes[1]}"
		secondary="${remotes[0]}"
	fi
elif (($# == 3))
then
	branch="$1"
	primary="$2"
	secondary="$3"
else
	failure "Incorrect arguments. Check 'git help sync'."
fi

# Check if any of them is empty string.
if [[ -z "$branch" || -z "$primary" || -z "$secondary" ]]
then
	failure "<branch>, <primary> and <secondary> could not be empty string."
fi

if [ -z "$msg" ]
then
	msg="Merge branch secondary/$branch into primary/$branch"
fi

# Check if current branch has uncommitted changed files.
if ((`git status -s | wc -l` != 0))
then
	failure "Your current branch has uncommitted changed files. Rollback or commit them first."
fi

old=$(git branch --no-color | awk '{if (NF==2 && $1=="*") print $2}')

# Generate a list of commands

# Accessing the seconary repository is always slow,
# so we fetch & update secondary repository first.
cmds=()
cmds+=("git fetch $secondary $branch")
cmds+=("git fetch $primary $branch")
cmds+=("git branch -f --no-track sync $primary/$branch")
cmds+=("git checkout sync")
cmds+=("git merge$ff -m '$msg' $secondary/$branch")
cmds+=("git push $secondary HEAD:$branch")
cmds+=("git push $primary HEAD:$branch")
cmds+=("git checkout $old")
cmds+=("git branch -D sync")


# Run commands
for ((ii=0;ii<${#cmds[@]};ii++))
do
	echo ">> ${cmds[$ii]}"

	if [[ "${DEBUG,,}" != "yes" && "${DEBUG,,}" != "y" ]]
	then
		eval "${cmds[$ii]}"

		if (($? != 0))
		then
			failure
		fi

		echo ""
	fi
done


