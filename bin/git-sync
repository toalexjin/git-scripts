#!/bin/bash

myname="sync"

failure() {
	if (($# > 0))
	then
		echo "$@" 1>&2
	fi

	exit 1
}

no_special_chars() {
	for ((i=1;i<=$#;i++))
	do
		if [ -z "${!i}" -o `expr index "${!i}" $' \t"'` -ne 0 -o `expr index "${!i}" "'"` -ne 0 ]
		then
			failure "Input argument \"${!i}\" is empty, or contains whitespace, TAB, \", '. Check 'git help $myname'."
		fi
	done
}

args=`getopt -o "m:h" -l "no-ff" -n "git sync" -- "$@"`
if (($? != 0))
then
	failure "Check 'git help $myname'."
fi

eval set -- "$args"

msg=""
ff=" --ff"
msg=""

while true; do
	case "$1" in
		-m)
			msg="${2//\'/\"}"
			shift 2
			;;

		--no-ff)
			ff=" --no-ff"
			shift
			;;

		-h)
			git help $myname
			failure
			;;

		--)
			shift
			break
			;;

		*)
			failure "\"$1\" is not an option!"
			;;
	esac
done

# Check if it's in a git repository.
if ! git branch > /dev/null 2>&1
then
	failure "You are not in a git repository."
fi

# Whitespace, TAB, " or ' are not allowed in any arguments.
no_special_chars "$@"


if (($# == 1))
then
	for ((i=1;i<=$#;i++))
	do
		if ((`expr index "${!i}" "/\\\\"` != 0))
		then
			failure "Invalid argument \"${!i}\". Check 'git help $myname'."
		fi
	done

	remotes=(`git remote`)
	if ((${#remotes[@]} != 2))
	then
		failure "Number of remote repositories is not 2 (see output of 'git remote')."
	fi

	if [ "${remotes[0]}" == "origin" ]
	then
		repos=("${remotes[0]}" "${remotes[1]}")
	else
		repos=("${remotes[1]}" "${remotes[0]}")
	fi

	branches=("$1" "$1")
elif (($# == 2))
then
	repos=()
	branches=()

	for ((i=1;i<=$#;i++))
	do
		if ((`expr index "${!i}" "\\\\"` != 0))
		then
			failure "Invalid argument \"${!i}\". Check 'git help $myname'."
		fi

		items=(${!i//\// })
		if [ "${#items[@]}" -ne 2 -o -z "${items[0]}" -o -z "${items[1]}" ]
		then
			failure "Invalid argument \"${!i}\". Check 'git help $myname'."
		fi

		repos+=("${items[0]}")
		branches+=("${items[1]}")
	done
elif (($# == 3))
then
	for ((i=1;i<=$#;i++))
	do
		if ((`expr index "${!i}" "/\\\\"` != 0))
		then
			failure "Invalid argument \"${!i}\". Check 'git help $myname'."
		fi
	done

	repos=("$2" "$3")
	branches=("$1" "$1")
else
	failure "Incorrect arguments. Check 'git help $myname'."
fi

# Debug purpose
if [ "${GIT_SCRIPTS_DEBUG,,}" == "yes" -o "${GIT_SCRIPTS_DEBUG,,}" == "y" ]
then
	echo "Repository: ${repos[@]}"
	echo "Branch: ${branches[@]}"
fi


if [ -z "$msg" ]
then
	msg="Merge branch ${repos[1]}/${branches[1]} into ${repos[0]}/${branches[0]}."
fi

# Check if current branch has uncommitted changed files.
if ((`git status -s | wc -l` != 0))
then
	failure "Your current branch has uncommitted changed files. Rollback or commit them first."
fi

old=$(git branch --no-color | awk '{if (NF==2 && $1=="*") print $2}')
if [ -z "$old" ]
then
	failure "Curent branch name is unknown. Check 'git branch --no-color'."
fi

# Generate a list of commands
cmds=()

# Accessing the seconary repository is always slow,
# so we fetch & update secondary repository first.
for ((i=${#repos[@]}-1;i>=0;i--))
do
	cmds+=("git fetch '${repos[$i]}' '${branches[$i]}'")
done

cmds+=("git branch -f --no-track sync '${repos[0]}/${branches[0]}'")
cmds+=("git checkout sync")
cmds+=("git merge$ff -m '$msg' '${repos[1]}/${branches[1]}'")

# Accessing the seconary repository is always slow,
# so we fetch & update secondary repository first.
for ((i=${#repos[@]}-1;i>=0;i--))
do
	cmds+=("git push '${repos[$i]}' 'HEAD:${branches[$i]}'")
done

cmds+=("git checkout '$old'")
cmds+=("git branch -D sync")


# Run commands
for ((ii=0;ii<${#cmds[@]};ii++))
do
	echo ">> ${cmds[$ii]}"

	if [ "${GIT_SCRIPTS_DEBUG,,}" != "yes" -a "${GIT_SCRIPTS_DEBUG,,}" != "y" ]
	then
		eval "${cmds[$ii]}"

		if (($? != 0))
		then
			failure
		fi

		echo ""
	fi
done


